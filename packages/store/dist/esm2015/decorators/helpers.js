/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { distinctUntilChanged } from 'rxjs/operators';
import { NgRedux } from '../components/ng-redux';
/**
 * Used with the `\@WithSubStore` class decorator to define a SubStore (AKA a
 * fractal store).
 *
 * For more info on substores, see
 * https://github.com/angular-redux/store/blob/master/articles/fractal-store.md
 * @record
 */
export function FractalStoreOptions() { }
/**
 * The name of an instance method that will define the
 * base path for the subStore. This method is expected to return an array
 * of property names or undefined/null.
 * @type {?}
 */
FractalStoreOptions.prototype.basePathMethodName;
/**
 * The localReducer for the substore in question.
 * @type {?}
 */
FractalStoreOptions.prototype.localReducer;
/** *
 * OPTIONS_KEY: this is per-class (static) and holds the config from the
 * \@SubStore decorator.
  @type {?} */
const OPTIONS_KEY = '@angular-redux::substore::class::options';
/** *
 * INSTANCE_SUBSTORE_KEY, INSTANCE_SELECTIONS_KEY: these are per-instance
 * (non-static) and holds references to the substores/selected observables
 * to be used by an instance of a decorated class. I'm not using
 * reflect-metadata here because I want
 *
 * 1. different instances to have different substores in the case where
 * `basePathMethodName` is dynamic.
 * 2. the instance substore to be garbage collected when the instance is no
 * longer reachable.
 * This is therefore an own-property on the actual instance of the decorated
 * class.
  @type {?} */
const INSTANCE_SUBSTORE_KEY = '@angular-redux::substore::instance::store';
/** @type {?} */
const INSTANCE_SELECTIONS_KEY = '@angular-redux::substore::instance::selections';
/** *
 * Used to detect when the base path changes - this allows components to
 * dynamically adjust their selections if necessary.
  @type {?} */
const INSTANCE_BASE_PATH_KEY = '@angular-redux::substore::instance::basepath';
/** @type {?} */
const getClassOptions = (decoratedInstance) => decoratedInstance.constructor[OPTIONS_KEY];
const ɵ0 = getClassOptions;
/** *
 * @hidden
  @type {?} */
export const setClassOptions = (decoratedClassConstructor, options) => {
    decoratedClassConstructor[OPTIONS_KEY] = options;
};
/** @type {?} */
const setInstanceStore = (decoratedInstance, store) => (decoratedInstance[INSTANCE_SUBSTORE_KEY] = store);
const ɵ1 = setInstanceStore;
/** @type {?} */
const getInstanceStore = (decoratedInstance) => decoratedInstance[INSTANCE_SUBSTORE_KEY];
const ɵ2 = getInstanceStore;
/** @type {?} */
const getInstanceSelectionMap = (decoratedInstance) => {
    /** @type {?} */
    const map = decoratedInstance[INSTANCE_SELECTIONS_KEY] || {};
    decoratedInstance[INSTANCE_SELECTIONS_KEY] = map;
    return map;
};
const ɵ3 = getInstanceSelectionMap;
/** @type {?} */
const hasBasePathChanged = (decoratedInstance, basePath) => decoratedInstance[INSTANCE_BASE_PATH_KEY] !== (basePath || []).toString();
const ɵ4 = hasBasePathChanged;
/** @type {?} */
const setInstanceBasePath = (decoratedInstance, basePath) => {
    decoratedInstance[INSTANCE_BASE_PATH_KEY] = (basePath || []).toString();
};
const ɵ5 = setInstanceBasePath;
/** @type {?} */
const clearInstanceState = (decoratedInstance) => {
    decoratedInstance[INSTANCE_SELECTIONS_KEY] = null;
    decoratedInstance[INSTANCE_SUBSTORE_KEY] = null;
    decoratedInstance[INSTANCE_BASE_PATH_KEY] = null;
};
const ɵ6 = clearInstanceState;
/** *
 * Gets the store associated with a decorated instance (e.g. a
 * component or service)
 * @hidden
  @type {?} */
export const getBaseStore = (decoratedInstance) => {
    // The root store hasn't been set up yet.
    if (!NgRedux.instance) {
        return undefined;
    }
    /** @type {?} */
    const options = getClassOptions(decoratedInstance);
    // This is not decorated with `@WithSubStore`. Return the root store.
    if (!options) {
        return NgRedux.instance;
    }
    /** @type {?} */
    const basePath = decoratedInstance[options.basePathMethodName]();
    if (hasBasePathChanged(decoratedInstance, basePath)) {
        clearInstanceState(decoratedInstance);
        setInstanceBasePath(decoratedInstance, basePath);
    }
    if (!basePath) {
        return NgRedux.instance;
    }
    /** @type {?} */
    const store = getInstanceStore(decoratedInstance);
    if (!store) {
        setInstanceStore(decoratedInstance, NgRedux.instance.configureSubStore(basePath, options.localReducer));
    }
    return getInstanceStore(decoratedInstance);
};
/** *
 * Creates an Observable from the given selection parameters,
 * rooted at decoratedInstance's store, and caches it on the
 * instance for future use.
 * @hidden
  @type {?} */
export const getInstanceSelection = (decoratedInstance, key, selector, transformer, comparator) => {
    /** @type {?} */
    const store = getBaseStore(decoratedInstance);
    if (store) {
        /** @type {?} */
        const selections = getInstanceSelectionMap(decoratedInstance);
        selections[key] =
            selections[key] ||
                (!transformer
                    ? store.select(selector, comparator)
                    : store.select(selector).pipe(obs$ => transformer(obs$, decoratedInstance), distinctUntilChanged(comparator)));
        return selections[key];
    }
    return undefined;
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6 };

//# sourceMappingURL=data:application/json;base64,
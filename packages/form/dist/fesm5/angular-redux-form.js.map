{"version":3,"file":"angular-redux-form.js.map","sources":["ng://@angular-redux/form/compose-reducers.ts","ng://@angular-redux/form/form-store.ts","ng://@angular-redux/form/form-exception.ts","ng://@angular-redux/form/state.ts","ng://@angular-redux/form/form-reducer.ts","ng://@angular-redux/form/configure.ts","ng://@angular-redux/form/connect/connect-base.ts","ng://@angular-redux/form/connect/connect-reactive.ts","ng://@angular-redux/form/connect/connect.ts","ng://@angular-redux/form/connect/connect.module.ts","ng://@angular-redux/form/shims.ts","ng://@angular-redux/form/connect-array/connect-array-template.ts","ng://@angular-redux/form/connect-array/connect-array.ts","ng://@angular-redux/form/connect-array/connect-array.module.ts","ng://@angular-redux/form/module.ts"],"sourcesContent":["import { AnyAction, Reducer } from 'redux';\n\nexport const composeReducers = <State>(\n  ...reducers: Reducer<State, AnyAction>[]\n): Reducer<State, AnyAction> => (s: any, action: AnyAction) =>\n  reducers.reduce((st, reducer) => reducer(st, action), s);\n","import { Injectable } from '@angular/core';\n\nimport { NgForm } from '@angular/forms';\n\nimport { NgRedux } from '@angular-redux/store';\n\nimport { Action, Unsubscribe } from 'redux';\n\nexport interface AbstractStore<RootState> {\n  /// Dispatch an action\n  dispatch(action: Action & { payload: any }): void;\n\n  /// Retrieve the current application state\n  getState(): RootState;\n\n  /// Subscribe to changes in the store\n  subscribe(fn: (state: RootState) => void): Unsubscribe;\n}\n\nexport const FORM_CHANGED = '@@angular-redux/form/FORM_CHANGED';\n\n@Injectable()\nexport class FormStore {\n  /// NOTE(cbond): The declaration of store is misleading. This class is\n  /// actually capable of taking a plain Redux store or an NgRedux instance.\n  /// But in order to make the ng dependency injector work properly, we\n  /// declare it as an NgRedux type, since the @angular-redux/store use case involves\n  /// calling the constructor of this class manually (from configure.ts),\n  /// where a plain store can be cast to an NgRedux. (For our purposes, they\n  /// have almost identical shapes.)\n  constructor(private store: NgRedux<any>) {}\n\n  getState() {\n    return this.store.getState();\n  }\n\n  subscribe(fn: (state: any) => void): Unsubscribe {\n    return this.store.subscribe(() => fn(this.getState()));\n  }\n\n  valueChanged<T>(path: string[], form: NgForm, value: T) {\n    this.store.dispatch({\n      type: FORM_CHANGED,\n      payload: {\n        path,\n        form,\n        valid: form.valid === true,\n        value,\n      },\n    });\n  }\n}\n","export class FormException extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","import { Iterable, Map as ImmutableMap } from 'immutable';\n\nimport { FormException } from './form-exception';\n\nexport interface Operations<T> {\n  /// Shallow clone the object\n  clone(): T;\n\n  /// Clone and merge\n  merge(key: number | string | null, value: T): any;\n\n  /// Clone the object and update a specific key inside of it\n  update(key: number | string | null, value: T): any;\n}\n\nexport type TraverseCallback = (\n  parent: any,\n  key: number | string,\n  remainingPath: string[],\n  value?: any,\n) => any;\n\nexport abstract class State {\n  static traverse<StateType>(\n    state: StateType,\n    path: string[],\n    fn?: TraverseCallback,\n  ) {\n    let deepValue = state;\n\n    for (const k of path) {\n      const parent = deepValue;\n\n      if (Iterable.isIterable(deepValue)) {\n        const m = (deepValue as any) as ImmutableMap<string, any>;\n        if (typeof m.get === 'function') {\n          deepValue = m.get(k);\n        } else {\n          throw new FormException(\n            `Cannot retrieve value from immutable nonassociative container: ${k}`,\n          );\n        }\n      } else if (deepValue instanceof Map) {\n        deepValue = ((deepValue as any) as Map<string, any>).get(k);\n      } else {\n        deepValue = (deepValue as any)[k];\n      }\n\n      if (typeof fn === 'function') {\n        const transformed = fn(\n          parent,\n          k,\n          path.slice(path.indexOf(k) + 1),\n          deepValue,\n        );\n\n        deepValue = transformed[k];\n\n        Object.assign(parent, transformed);\n      }\n\n      // If we were not able to find this state inside of our root state\n      // structure, then we return undefined -- not null -- to indicate that\n      // state. But this could be a perfectly normal use-case so we don't\n      // want to throw an exception or anything along those lines.\n      if (deepValue === undefined) {\n        return undefined;\n      }\n    }\n\n    return deepValue;\n  }\n\n  static get<StateType>(state: StateType, path: string[]): any {\n    return State.traverse(state, path);\n  }\n\n  static assign<StateType>(state: StateType, path: string[], value?: any) {\n    const operations = State.inspect(state);\n\n    if (path.length === 0) {\n      return operations.update(null, value);\n    }\n\n    const root = operations.clone();\n\n    // We want to shallow clone the object, and then trace a path to the place\n    // we want to update, cloning each object we traversed on our way and then\n    // finally updating the value on the last parent to be @value. This seems\n    // to offer the best performance: we can shallow clone everything that has\n    // not been modified, and {deep clone + update} the path down to the value\n    // that we wish to update.\n    State.traverse(\n      root,\n      path,\n      (parent, key: number | string, remainingPath: string[], innerValue?) => {\n        const parentOperations = State.inspect(parent);\n\n        if (innerValue) {\n          const innerOperations = State.inspect(innerValue);\n\n          return parentOperations.update(\n            key,\n            remainingPath.length > 0\n              ? innerOperations.clone()\n              : innerOperations.merge(null, value),\n          );\n        } else {\n          const getProbableType = (stateKey: string | number) => {\n            // NOTE(cbond): If your code gets here, you might not be using the library\n            /// correctly. If you are assigning into a path in your state, try to\n            /// ensure that there is a path to traverse, even if everything is just\n            /// empty objects and arrays. If we have to guess the type of the containers\n            /// and then create them ourselves, we may not get the types right. Use\n            /// the Redux `initial state' construct to resolve this issue if you like.\n            return typeof stateKey === 'number'\n              ? new Array()\n              : Array.isArray(stateKey)\n                ? ImmutableMap()\n                : new Object();\n          };\n\n          return parentOperations.update(\n            key,\n            remainingPath.length > 0\n              ? getProbableType(remainingPath[0])\n              : value,\n          );\n        }\n      },\n    );\n\n    return root;\n  }\n\n  static inspect<K>(object: K): Operations<K> {\n    const metaOperations = (\n      // TODO: Write proper type declarations for following Function types\n      update: Function,\n      merge: Function,\n      clone?: Function,\n    ) => {\n      const operations = {\n        /// Clone the object (shallow)\n        clone:\n          typeof clone === 'function'\n            ? () => clone(object as any) as any\n            : () => object,\n\n        /// Update a specific key inside of the container object\n        update: (key: string, value: K) =>\n          update(operations.clone(), key, value),\n\n        /// Merge existing values with new values\n        merge: (key: string, value: K) => {\n          const cloned = operations.clone();\n          return merge(cloned, key, value, (v: any) => update(cloned, key, v));\n        },\n      };\n\n      return operations;\n    };\n\n    if (Iterable.isIterable(object)) {\n      return metaOperations(\n        // Replace\n        (parent: any, key: number | string, value: K) => {\n          if (key != null) {\n            return parent.set(key, value);\n          } else {\n            return value;\n          }\n        },\n        // Merge\n        (parent: any, key: number | string | string[], value: K) => {\n          if (key) {\n            return parent.mergeDeepIn(Array.isArray(key) ? key : [key], value);\n          } else {\n            if (ImmutableMap.isMap(value)) {\n              return parent.mergeDeep(value);\n            } else {\n              return parent.concat(value);\n            }\n          }\n        },\n      );\n    } else if (Array.isArray(object)) {\n      return metaOperations(\n        // Replace array contents\n        (parent: any, key: number, value: K) => {\n          if (key != null) {\n            parent[key] = value;\n          } else {\n            parent.splice.apply(\n              parent,\n              [0, parent.length].concat(Array.isArray(value) ? value : [value]),\n            );\n          }\n        },\n\n        // Merge\n        (parent: any, _: any, value: K, setter: (v: K) => K) => {\n          setter(parent.concat(value));\n          return parent;\n        },\n\n        // Clone\n        () => Array.prototype.slice.call(object, 0),\n      );\n    } else if (object instanceof Map) {\n      return metaOperations(\n        // Update map key\n        (parent: any, key: number | string, value: K) => {\n          if (key != null) {\n            return parent.set(key, value);\n          } else {\n            const m = new Map(value as any);\n            parent.clear();\n            m.forEach((mapValue, index) => parent.set(index, mapValue));\n            return parent;\n          }\n        },\n\n        // Merge\n        (parent: Map<string, any>, _: any, value: K) => {\n          const m = new Map<string, any>(value as any);\n          m.forEach((mapValue, key) => parent.set(key, mapValue));\n          return parent;\n        },\n\n        // Clone\n        () =>\n          object instanceof WeakMap\n            ? new WeakMap<object, any>(object as any)\n            : new Map<string, any>(object as any),\n      );\n    } else if (object instanceof WeakSet || object instanceof Set) {\n      return metaOperations(\n        // Update element at index in set\n        (parent: any, key: number, value: K) => {\n          if (key != null) {\n            return parent.set(key, value);\n          } else {\n            const s = new Set(value as any);\n            s.forEach((setValue, index) => parent.set(index, setValue));\n            s.clear();\n            return parent;\n          }\n        },\n\n        // Merge\n        (parent: Set<any>, _: any, value: any) => {\n          for (const element of value) {\n            parent.add(element);\n          }\n          return parent;\n        },\n\n        // Clone\n        () =>\n          object instanceof WeakSet\n            ? new WeakSet<any>(object as any)\n            : new Set<any>(object as any),\n      );\n    } else if (object instanceof Date) {\n      throw new FormException(\n        'Cannot understand why a Date object appears in the mutation path!',\n      );\n    } else {\n      switch (typeof object) {\n        case 'boolean':\n        case 'function':\n        case 'number':\n        case 'string':\n        case 'symbol':\n        case 'undefined':\n          break;\n        case 'object':\n          if (object == null) {\n            break;\n          }\n          return metaOperations(\n            (parent: any, key: any, value: K) => {\n              if (key != null) {\n                return { ...parent, [key]: value };\n              }\n              return { ...parent, ...(value as any) };\n            },\n            (parent: any, _: any, value: K) => {\n              for (const k of Object.keys(value)) {\n                parent[k] = (value as any)[k];\n              }\n              return parent;\n            },\n            () => ({ ...(object as any) }),\n          );\n        default:\n          break;\n      }\n    }\n\n    throw new Error(\n      `An object of type ${typeof object} has appeared in the mutation path! Every element ` +\n        'in the mutation path should be an array, an associative container, or a set',\n    );\n  }\n\n  static empty(value: any): boolean {\n    return (\n      value == null ||\n      (value.length === 0 ||\n        (typeof value.length === 'undefined' &&\n          Object.keys(value).length === 0))\n    );\n  }\n}\n","import { Iterable } from 'immutable';\n\nimport { Action } from 'redux';\n\nimport { FORM_CHANGED } from './form-store';\n\nimport { State } from './state';\n\nexport const defaultFormReducer = <RootState>(\n  initialState?: RootState | Iterable.Keyed<string, any>,\n) => {\n  const reducer = (\n    state: RootState | Iterable.Keyed<string, any> | undefined = initialState,\n    action: Action & { payload?: any },\n  ) => {\n    switch (action.type) {\n      case FORM_CHANGED:\n        return State.assign(state, action.payload.path, action.payload.value);\n      default:\n        return state;\n    }\n  };\n\n  return reducer;\n};\n","import { Action, Store } from 'redux';\n\nimport { AbstractStore, FormStore } from './form-store';\n\n/// Use this function in your providers list if you are not using @angular-redux/core.\n/// This will allow you to provide a preexisting store that you have already\n/// configured, rather than letting @angular-redux/core create one for you.\nexport const provideReduxForms = <T>(store: Store<T> | any) => {\n  const abstractStore = wrap(store);\n\n  return [\n    { provide: FormStore, useValue: new FormStore(abstractStore as any) },\n  ];\n};\n\nconst wrap = <T>(store: Store<T> | any): AbstractStore<T> => {\n  const dispatch = (action: Action) => store.dispatch(action);\n\n  const getState = () => store.getState() as T;\n\n  const subscribe = (fn: (state: T) => void) =>\n    store.subscribe(() => fn(store.getState()));\n\n  return { dispatch, getState, subscribe };\n};\n","import { AfterContentInit, Input, OnDestroy } from '@angular/core';\n\nimport {\n  AbstractControl,\n  FormArray,\n  FormControl,\n  FormGroup,\n  NgControl,\n} from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { Unsubscribe } from 'redux';\n\nimport { debounceTime } from 'rxjs/operators';\n\nimport { FormStore } from '../form-store';\nimport { State } from '../state';\n\nexport interface ControlPair {\n  path: string[];\n  control: AbstractControl;\n}\n\nexport class ConnectBase implements OnDestroy, AfterContentInit {\n  get path(): string[] {\n    const path =\n      typeof this.connect === 'function' ? this.connect() : this.connect;\n\n    switch (typeof path) {\n      case 'object':\n        if (State.empty(path)) {\n          return [];\n        }\n        if (Array.isArray(path)) {\n          return path as string[];\n        }\n      case 'string':\n        return (path as string).split(/\\./g);\n      default:\n        // fallthrough above (no break)\n        throw new Error(\n          `Cannot determine path to object: ${JSON.stringify(path)}`,\n        );\n    }\n  }\n  @Input() connect?: () => (string | number) | (string | number)[];\n  protected store?: FormStore;\n  protected form: any;\n  private stateSubscription?: Unsubscribe;\n\n  private formSubscription?: Subscription;\n\n  ngOnDestroy() {\n    if (this.formSubscription) {\n      this.formSubscription.unsubscribe();\n    }\n\n    if (typeof this.stateSubscription === 'function') {\n      this.stateSubscription(); // unsubscribe\n    }\n  }\n\n  ngAfterContentInit() {\n    Promise.resolve().then(() => {\n      this.resetState();\n\n      if (this.store) {\n        this.stateSubscription = this.store.subscribe(() => this.resetState());\n      }\n\n      Promise.resolve().then(() => {\n        this.formSubscription = (this.form.valueChanges as any)\n          .pipe(debounceTime(0))\n          .subscribe((values: any) => this.publish(values));\n      });\n    });\n  }\n\n  private descendants(path: string[], formElement: any): ControlPair[] {\n    const pairs = new Array<ControlPair>();\n\n    if (formElement instanceof FormArray) {\n      formElement.controls.forEach((c, index) => {\n        for (const d of this.descendants((path as any).concat([index]), c)) {\n          pairs.push(d);\n        }\n      });\n    } else if (formElement instanceof FormGroup) {\n      for (const k of Object.keys(formElement.controls)) {\n        pairs.push({\n          path: path.concat([k]),\n          control: formElement.controls[k],\n        });\n      }\n    } else if (\n      formElement instanceof NgControl ||\n      formElement instanceof FormControl\n    ) {\n      return [{ path, control: formElement as any }];\n    } else {\n      throw new Error(\n        `Unknown type of form element: ${formElement.constructor.name}`,\n      );\n    }\n\n    return pairs.filter(p => {\n      const parent = (p.control as any)._parent;\n      return parent === this.form.control || parent === this.form;\n    });\n  }\n\n  private resetState() {\n    const formElement =\n      this.form.control === undefined ? this.form : this.form.control;\n\n    const children = this.descendants([], formElement);\n\n    children.forEach(c => {\n      const { path, control } = c;\n\n      const value = State.get(this.getState(), this.path.concat(path));\n\n      if (control.value !== value) {\n        control.setValue(value);\n      }\n    });\n  }\n\n  private publish(value: any) {\n    if (this.store) {\n      this.store.valueChanged(this.path, this.form, value);\n    }\n  }\n\n  private getState() {\n    if (this.store) {\n      return this.store.getState();\n    }\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { FormStore } from '../form-store';\n\nimport { ConnectBase } from './connect-base';\n\n// For reactive forms (without implicit NgForm)\n@Directive({ selector: 'form[connect][formGroup]' })\nexport class ReactiveConnectDirective extends ConnectBase {\n  @Input() formGroup: any;\n\n  constructor(protected store: FormStore) {\n    super();\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { NgForm } from '@angular/forms';\n\nimport { FormStore } from '../form-store';\nimport { ConnectBase } from './connect-base';\n\n// For template forms (with implicit NgForm)\n@Directive({ selector: 'form[connect]:not([formGroup])' })\nexport class ConnectDirective extends ConnectBase {\n  constructor(protected store: FormStore, protected form: NgForm) {\n    super();\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ConnectDirective } from './connect';\nimport { ReactiveConnectDirective } from './connect-reactive';\n\nconst declarations = [ConnectDirective, ReactiveConnectDirective];\n\n@NgModule({\n  declarations: [...declarations],\n  exports: [...declarations],\n})\nexport class NgReduxFormConnectModule {}\n","import {\n  CheckboxControlValueAccessor,\n  ControlContainer,\n  ControlValueAccessor,\n  RadioControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n} from '@angular/forms';\n\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  return [...(parent.path || []), name];\n}\n\nconst BUILTIN_ACCESSORS = [\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n];\n\nexport function isBuiltInAccessor(\n  valueAccessor: ControlValueAccessor,\n): boolean {\n  return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n","export class ConnectArrayTemplate {\n  constructor(public $implicit: any, public index: number, public item: any) {}\n}\n","import {\n  Directive,\n  EmbeddedViewRef,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  SkipSelf,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidatorFn,\n  ControlContainer,\n  FormArray,\n  FormControl,\n  FormGroup,\n  FormGroupDirective,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n  NgModelGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Unsubscribe } from 'redux';\n\nimport { ConnectBase } from '../connect';\nimport { FormStore } from '../form-store';\nimport { controlPath } from '../shims';\nimport { State } from '../state';\nimport { ConnectArrayTemplate } from './connect-array-template';\n\n@Directive({\n  selector: '[connectArray]',\n  providers: [\n    {\n      provide: ControlContainer,\n      useExisting: forwardRef(() => ConnectArrayDirective),\n    },\n  ],\n})\nexport class ConnectArrayDirective extends ControlContainer\n  implements OnInit, OnDestroy {\n  private stateSubscription: Unsubscribe;\n\n  private array = new FormArray([]);\n\n  private key?: string;\n\n  constructor(\n    @Optional()\n    @Host()\n    @SkipSelf()\n    private parent: ControlContainer,\n    @Optional()\n    @Self()\n    @Inject(NG_VALIDATORS)\n    private rawValidators: any[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    private rawAsyncValidators: any[],\n    private connection: ConnectBase,\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef,\n    private store: FormStore,\n  ) {\n    super();\n\n    this.stateSubscription = this.store.subscribe(state =>\n      this.resetState(state),\n    );\n\n    this.registerInternals(this.array);\n  }\n\n  @Input()\n  set connectArrayOf(collection: any) {\n    this.key = collection;\n\n    this.resetState(this.store.getState());\n  }\n\n  ngOnInit() {\n    this.formDirective.addControl(this as any);\n  }\n\n  get name(): string {\n    return this.key || '';\n  }\n\n  get control(): FormArray {\n    return this.array;\n  }\n\n  get formDirective(): FormGroupDirective {\n    return this.parent.formDirective as FormGroupDirective;\n  }\n\n  get path(): string[] {\n    return this.key ? controlPath(this.key, this.parent) : [];\n  }\n\n  get validator(): ValidatorFn | null {\n    return Validators.compose(this.rawValidators);\n  }\n\n  get asyncValidator(): AsyncValidatorFn | null {\n    return Validators.composeAsync(this.rawAsyncValidators);\n  }\n\n  updateValueAndValidity() {\n    // stub?\n  }\n\n  ngOnDestroy() {\n    this.viewContainerRef.clear();\n\n    if (this.key) {\n      this.formDirective.form.removeControl(this.key);\n    }\n\n    this.stateSubscription();\n  }\n\n  private resetState(state: any) {\n    if (this.key == null || this.key.length === 0) {\n      return; // no state to retreive if no key is set\n    }\n\n    const iterable = State.get(state, this.connection.path.concat(this.path));\n\n    let index = 0;\n\n    for (const value of iterable) {\n      const viewRef =\n        this.viewContainerRef.length > index\n          ? (this.viewContainerRef.get(index) as EmbeddedViewRef<\n              ConnectArrayTemplate\n            >)\n          : null;\n\n      if (viewRef == null) {\n        const embeddedViewRef = this.viewContainerRef.createEmbeddedView<\n          ConnectArrayTemplate\n        >(\n          this.templateRef,\n          new ConnectArrayTemplate(index, index, value),\n          index,\n        );\n\n        this.patchDescendantControls(embeddedViewRef);\n\n        this.array.insert(\n          index,\n          this.transform(this.array, embeddedViewRef.context.item),\n        );\n      } else {\n        Object.assign(\n          viewRef.context,\n          new ConnectArrayTemplate(index, index, value),\n        );\n      }\n\n      ++index;\n    }\n\n    while (this.viewContainerRef.length > index) {\n      this.viewContainerRef.remove(this.viewContainerRef.length - 1);\n    }\n  }\n\n  private registerInternals(array: any) {\n    array.registerControl = () => undefined;\n    array.registerOnChange = () => undefined;\n\n    Object.defineProperties(this, {\n      _rawValidators: {\n        value: this.rawValidators || [],\n      },\n      _rawAsyncValidators: {\n        value: this.rawAsyncValidators || [],\n      },\n    });\n  }\n\n  private patchDescendantControls(viewRef: any) {\n    const groups = Object.keys(viewRef._view)\n      .map(k => viewRef._view[k])\n      .filter(c => c instanceof NgModelGroup);\n\n    groups.forEach(c => {\n      Object.defineProperties(c, {\n        _parent: {\n          value: this,\n        },\n        _checkParentType: {\n          value: () => undefined,\n        },\n      });\n    });\n  }\n\n  private transform(\n    parent: FormGroup | FormArray,\n    reference: any,\n  ): AbstractControl {\n    const emptyControl = () => {\n      const control = new FormControl(null);\n      control.setParent(parent);\n      return control;\n    };\n\n    if (reference == null) {\n      return emptyControl();\n    }\n\n    if (typeof reference.toJS === 'function') {\n      reference = reference.toJS();\n    }\n\n    switch (typeof reference) {\n      case 'string':\n      case 'number':\n      case 'boolean':\n        return emptyControl();\n    }\n\n    const iterate = (iterable: any): FormArray => {\n      const array = new FormArray([]);\n\n      this.registerInternals(array);\n\n      for (let i = array.length; i > 0; i--) {\n        array.removeAt(i);\n      }\n\n      for (const value of iterable) {\n        const transformed = this.transform(array, value);\n        if (transformed) {\n          array.push(transformed);\n        }\n      }\n\n      return array;\n    };\n\n    const associate = (value: any): FormGroup => {\n      const group = new FormGroup({});\n      group.setParent(parent);\n\n      for (const key of Object.keys(value)) {\n        const transformed = this.transform(group, value[key]);\n        if (transformed) {\n          group.addControl(key, transformed);\n        }\n      }\n\n      return group;\n    };\n\n    if (Array.isArray(reference)) {\n      return iterate(reference as any[]);\n    } else if (reference instanceof Set) {\n      return iterate(reference as Set<any>);\n    } else if (reference instanceof Map) {\n      return associate(reference as Map<string, any>);\n    } else if (reference instanceof Object) {\n      return associate(reference);\n    } else {\n      throw new Error(\n        `Cannot convert object of type ${typeof reference} / ${reference.toString()} to form element`,\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ConnectArrayDirective } from './connect-array';\n\nconst declarations = [ConnectArrayDirective];\n\n@NgModule({\n  declarations: [...declarations],\n  exports: [...declarations],\n})\nexport class NgReduxFormConnectArrayModule {}\n","import { NgRedux } from '@angular-redux/store';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NgReduxFormConnectModule } from './connect';\nimport { NgReduxFormConnectArrayModule } from './connect-array';\nimport { FormStore } from './form-store';\n\nexport function formStoreFactory(ngRedux: NgRedux<any>) {\n  return new FormStore(ngRedux);\n}\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    NgReduxFormConnectModule,\n    NgReduxFormConnectArrayModule,\n  ],\n  exports: [NgReduxFormConnectModule, NgReduxFormConnectArrayModule],\n  providers: [\n    {\n      provide: FormStore,\n      useFactory: formStoreFactory,\n      deps: [NgRedux],\n    },\n  ],\n})\nexport class NgReduxFormModule {}\n"],"names":["tslib_1.__extends","tslib_1.__values","ImmutableMap","declarations"],"mappings":";;;;;;;;;;;;AAEA,IAAa,eAAe,GAAG;IAC7B,kBAAwC;SAAxC,UAAwC,EAAxC,qBAAwC,EAAxC,IAAwC;QAAxC,6BAAwC;;IACV,OAAA,UAAC,CAAM,EAAE,MAAiB;QACxD,OAAA,QAAQ,CAAC,MAAM,CAAC,UAAC,EAAE,EAAE,OAAO,IAAK,OAAA,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,GAAA,EAAE,CAAC,CAAC;KAAA;CAAA;;;;;;ACL1D;AAmBA,IAAa,YAAY,GAAG,mCAAmC,CAAC;;;;;;;;;IAW9D,mBAAoB,KAAmB;QAAnB,UAAK,GAAL,KAAK,CAAc;KAAI;;;;IAE3C,4BAAQ;;;IAAR;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;KAC9B;;;;;IAED,6BAAS;;;;IAAT,UAAU,EAAwB;QAAlC,iBAEC;QADC,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,cAAM,OAAA,EAAE,CAAC,KAAI,CAAC,QAAQ,EAAE,CAAC,GAAA,CAAC,CAAC;KACxD;;;;;;;;IAED,gCAAY;;;;;;;IAAZ,UAAgB,IAAc,EAAE,IAAY,EAAE,KAAQ;QACpD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAClB,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE;gBACP,IAAI,MAAA;gBACJ,IAAI,MAAA;gBACJ,KAAK,EAAE,IAAI,CAAC,KAAK,KAAK,IAAI;gBAC1B,KAAK,OAAA;aACN;SACF,CAAC,CAAC;KACJ;;gBA7BF,UAAU;;;;gBAjBF,OAAO;;oBAJhB;;;;;;;ICAA;IAAmCA,iCAAK;IACtC,uBAAY,GAAW;eACrB,kBAAM,GAAG,CAAC;KACX;wBAHH;EAAmC,KAAK,EAIvC;;;;;;;;;ACkBD;;;AAAA;;;;;;;;;;IACS,cAAQ;;;;;;;IAAf,UACE,KAAgB,EAChB,IAAc,EACd,EAAqB;;QAErB,IAAI,SAAS,GAAG,KAAK,CAAC;;YAEtB,KAAgB,IAAA,SAAAC,SAAA,IAAI,CAAA,0BAAA;gBAAf,IAAM,CAAC,iBAAA;;gBACV,IAAM,QAAM,GAAG,SAAS,CAAC;gBAEzB,IAAI,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;;oBAClC,IAAM,CAAC,wCAAI,SAAgB,IAA+B;oBAC1D,IAAI,OAAO,CAAC,CAAC,GAAG,KAAK,UAAU,EAAE;wBAC/B,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACtB;yBAAM;wBACL,MAAM,IAAI,aAAa,CACrB,oEAAkE,CAAG,CACtE,CAAC;qBACH;iBACF;qBAAM,IAAI,SAAS,YAAY,GAAG,EAAE;oBACnC,SAAS,GAAG,sCAAE,SAAgB,KAAuB,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC7D;qBAAM;oBACL,SAAS,GAAG,mBAAC,SAAgB,GAAE,CAAC,CAAC,CAAC;iBACnC;gBAED,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;;oBAC5B,IAAM,WAAW,GAAG,EAAE,CACpB,QAAM,EACN,CAAC,EACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAC/B,SAAS,CACV,CAAC;oBAEF,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oBAE3B,MAAM,CAAC,MAAM,CAAC,QAAM,EAAE,WAAW,CAAC,CAAC;iBACpC;;;;;gBAMD,IAAI,SAAS,KAAK,SAAS,EAAE;oBAC3B,OAAO,SAAS,CAAC;iBAClB;aACF;;;;;;;;;QAED,OAAO,SAAS,CAAC;;KAClB;;;;;;;IAEM,SAAG;;;;;;IAAV,UAAsB,KAAgB,EAAE,IAAc;QACpD,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KACpC;;;;;;;;IAEM,YAAM;;;;;;;IAAb,UAAyB,KAAgB,EAAE,IAAc,EAAE,KAAW;;QACpE,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAExC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACvC;;QAED,IAAM,IAAI,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;;;;;;;QAQhC,KAAK,CAAC,QAAQ,CACZ,IAAI,EACJ,IAAI,EACJ,UAAC,MAAM,EAAE,GAAoB,EAAE,aAAuB,EAAE,UAAW;;YACjE,IAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAE/C,IAAI,UAAU,EAAE;;gBACd,IAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAElD,OAAO,gBAAgB,CAAC,MAAM,CAC5B,GAAG,EACH,aAAa,CAAC,MAAM,GAAG,CAAC;sBACpB,eAAe,CAAC,KAAK,EAAE;sBACvB,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CACvC,CAAC;aACH;iBAAM;;gBACL,IAAM,eAAe,GAAG,UAAC,QAAyB;;oBAOhD,OAAO,OAAO,QAAQ,KAAK,QAAQ;0BAC/B,IAAI,KAAK,EAAE;0BACX,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;8BACrBC,KAAY,EAAE;8BACd,IAAI,MAAM,EAAE,CAAC;iBACpB,CAAC;gBAEF,OAAO,gBAAgB,CAAC,MAAM,CAC5B,GAAG,EACH,aAAa,CAAC,MAAM,GAAG,CAAC;sBACpB,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;sBACjC,KAAK,CACV,CAAC;aACH;SACF,CACF,CAAC;QAEF,OAAO,IAAI,CAAC;KACb;;;;;;IAEM,aAAO;;;;;IAAd,UAAkB,MAAS;;QACzB,IAAM,cAAc,GAAG;;;QAErB,MAAgB,EAChB,KAAe,EACf,KAAgB;;YAEhB,IAAM,UAAU,GAAG;gBAEjB,KAAK,EACH,OAAO,KAAK,KAAK,UAAU;sBACvB,sBAAM,KAAK,mBAAC,MAAa,EAAQ,IAAA;sBACjC,cAAM,OAAA,MAAM,GAAA;gBAGlB,MAAM,EAAE,UAAC,GAAW,EAAE,KAAQ;oBAC5B,OAAA,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC;iBAAA;gBAGxC,KAAK,EAAE,UAAC,GAAW,EAAE,KAAQ;;oBAC3B,IAAM,MAAM,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;oBAClC,OAAO,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,UAAC,CAAM,IAAK,OAAA,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;iBACtE;aACF,CAAC;YAEF,OAAO,UAAU,CAAC;SACnB,CAAC;QAEF,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC/B,OAAO,cAAc;;;YAEnB,UAAC,MAAW,EAAE,GAAoB,EAAE,KAAQ;gBAC1C,IAAI,GAAG,IAAI,IAAI,EAAE;oBACf,OAAO,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;iBAC/B;qBAAM;oBACL,OAAO,KAAK,CAAC;iBACd;aACF;;;YAED,UAAC,MAAW,EAAE,GAA+B,EAAE,KAAQ;gBACrD,IAAI,GAAG,EAAE;oBACP,OAAO,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;iBACpE;qBAAM;oBACL,IAAIA,KAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;wBAC7B,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;qBAChC;yBAAM;wBACL,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;qBAC7B;iBACF;aACF,CACF,CAAC;SACH;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAChC,OAAO,cAAc;;;YAEnB,UAAC,MAAW,EAAE,GAAW,EAAE,KAAQ;gBACjC,IAAI,GAAG,IAAI,IAAI,EAAE;oBACf,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;iBACrB;qBAAM;oBACL,MAAM,CAAC,MAAM,CAAC,KAAK,CACjB,MAAM,EACN,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAClE,CAAC;iBACH;aACF;;;YAGD,UAAC,MAAW,EAAE,CAAM,EAAE,KAAQ,EAAE,MAAmB;gBACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7B,OAAO,MAAM,CAAC;aACf;;;YAGD,cAAM,OAAA,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,GAAA,CAC5C,CAAC;SACH;aAAM,IAAI,MAAM,YAAY,GAAG,EAAE;YAChC,OAAO,cAAc;;;YAEnB,UAAC,MAAW,EAAE,GAAoB,EAAE,KAAQ;gBAC1C,IAAI,GAAG,IAAI,IAAI,EAAE;oBACf,OAAO,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;iBAC/B;qBAAM;;oBACL,IAAM,CAAC,GAAG,IAAI,GAAG,mBAAC,KAAY,EAAC,CAAC;oBAChC,MAAM,CAAC,KAAK,EAAE,CAAC;oBACf,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAE,KAAK,IAAK,OAAA,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAA,CAAC,CAAC;oBAC5D,OAAO,MAAM,CAAC;iBACf;aACF;;;YAGD,UAAC,MAAwB,EAAE,CAAM,EAAE,KAAQ;;gBACzC,IAAM,CAAC,GAAG,IAAI,GAAG,mBAAc,KAAY,EAAC,CAAC;gBAC7C,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAE,GAAG,IAAK,OAAA,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAA,CAAC,CAAC;gBACxD,OAAO,MAAM,CAAC;aACf;;;YAGD;gBACE,OAAA,MAAM,YAAY,OAAO;sBACrB,IAAI,OAAO,mBAAc,MAAa,EAAC;sBACvC,IAAI,GAAG,mBAAc,MAAa,EAAC;aAAA,CAC1C,CAAC;SACH;aAAM,IAAI,MAAM,YAAY,OAAO,IAAI,MAAM,YAAY,GAAG,EAAE;YAC7D,OAAO,cAAc;;;YAEnB,UAAC,MAAW,EAAE,GAAW,EAAE,KAAQ;gBACjC,IAAI,GAAG,IAAI,IAAI,EAAE;oBACf,OAAO,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;iBAC/B;qBAAM;;oBACL,IAAM,CAAC,GAAG,IAAI,GAAG,mBAAC,KAAY,EAAC,CAAC;oBAChC,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAE,KAAK,IAAK,OAAA,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAA,CAAC,CAAC;oBAC5D,CAAC,CAAC,KAAK,EAAE,CAAC;oBACV,OAAO,MAAM,CAAC;iBACf;aACF;;;YAGD,UAAC,MAAgB,EAAE,CAAM,EAAE,KAAU;;oBACnC,KAAsB,IAAA,UAAAD,SAAA,KAAK,CAAA,4BAAA;wBAAtB,IAAM,OAAO,kBAAA;wBAChB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;qBACrB;;;;;;;;;gBACD,OAAO,MAAM,CAAC;;aACf;;;YAGD;gBACE,OAAA,MAAM,YAAY,OAAO;sBACrB,IAAI,OAAO,mBAAM,MAAa,EAAC;sBAC/B,IAAI,GAAG,mBAAM,MAAa,EAAC;aAAA,CAClC,CAAC;SACH;aAAM,IAAI,MAAM,YAAY,IAAI,EAAE;YACjC,MAAM,IAAI,aAAa,CACrB,mEAAmE,CACpE,CAAC;SACH;aAAM;YACL,QAAQ,OAAO,MAAM;gBACnB,KAAK,SAAS,CAAC;gBACf,KAAK,UAAU,CAAC;gBAChB,KAAK,QAAQ,CAAC;gBACd,KAAK,QAAQ,CAAC;gBACd,KAAK,QAAQ,CAAC;gBACd,KAAK,WAAW;oBACd,MAAM;gBACR,KAAK,QAAQ;oBACX,IAAI,MAAM,IAAI,IAAI,EAAE;wBAClB,MAAM;qBACP;oBACD,OAAO,cAAc,CACnB,UAAC,MAAW,EAAE,GAAQ,EAAE,KAAQ;wBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;4BACf,oBAAY,MAAM,eAAG,GAAG,IAAG,KAAK,OAAG;yBACpC;wBACD,oBAAY,MAAM,qBAAM,KAAY,IAAI;;qBACzC,EACD,UAAC,MAAW,EAAE,CAAM,EAAE,KAAQ;;4BAC5B,KAAgB,IAAA,KAAAA,SAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,gBAAA;gCAA7B,IAAM,CAAC,WAAA;gCACV,MAAM,CAAC,CAAC,CAAC,GAAG,mBAAC,KAAY,GAAE,CAAC,CAAC,CAAC;6BAC/B;;;;;;;;;wBACD,OAAO,MAAM,CAAC;;qBACf,EACD,cAAM,wCAAO,MAAa,OAAI,CAC/B,CAAC;gBACJ;oBACE,MAAM;aACT;SACF;QAED,MAAM,IAAI,KAAK,CACb,uBAAqB,OAAO,MAAM,uDAAoD;YACpF,6EAA6E,CAChF,CAAC;KACH;;;;;IAEM,WAAK;;;;IAAZ,UAAa,KAAU;QACrB,QACE,KAAK,IAAI,IAAI;aACZ,KAAK,CAAC,MAAM,KAAK,CAAC;iBAChB,OAAO,KAAK,CAAC,MAAM,KAAK,WAAW;oBAClC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,EACrC;KACH;gBA1TH;IA2TC,CAAA;;;;;;ACvTD;AAIA,IAAa,kBAAkB,GAAG,UAChC,YAAsD;;IAEtD,IAAM,OAAO,GAAG,UACd,KAAyE,EACzE,MAAkC;QADlC,sBAAA,EAAA,oBAAyE;QAGzE,QAAQ,MAAM,CAAC,IAAI;YACjB,KAAK,YAAY;gBACf,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACxE;gBACE,OAAO,KAAK,CAAC;SAChB;KACF,CAAC;IAEF,OAAO,OAAO,CAAC;CAChB;;;;;;ACtBD;AAKA,IAAa,iBAAiB,GAAG,UAAI,KAAqB;;IACxD,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IAElC,OAAO;QACL,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,SAAS,mBAAC,aAAoB,EAAC,EAAE;KACtE,CAAC;CACH,CAAC;;AAEF,IAAM,IAAI,GAAG,UAAI,KAAqB;;IACpC,IAAM,QAAQ,GAAG,UAAC,MAAc,IAAK,OAAA,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAA,CAAC;;IAE5D,IAAM,QAAQ,GAAG,sBAAM,KAAK,CAAC,QAAQ,EAAO,IAAA,CAAC;;IAE7C,IAAM,SAAS,GAAG,UAAC,EAAsB;QACvC,OAAA,KAAK,CAAC,SAAS,CAAC,cAAM,OAAA,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAA,CAAC;KAAA,CAAC;IAE9C,OAAO,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,CAAC;CAC1C,CAAC;;;;;;;;;ICCA,sBAAI,6BAAI;;;;QAAR;;YACE,IAAM,IAAI,GACR,OAAO,IAAI,CAAC,OAAO,KAAK,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;YAErE,QAAQ,OAAO,IAAI;gBACjB,KAAK,QAAQ;oBACX,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;wBACrB,OAAO,EAAE,CAAC;qBACX;oBACD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACvB,yBAAO,IAAgB,EAAC;qBACzB;gBACH,KAAK,QAAQ;oBACX,OAAO,mBAAC,IAAc,GAAE,KAAK,CAAC,KAAK,CAAC,CAAC;gBACvC;;oBAEE,MAAM,IAAI,KAAK,CACb,sCAAoC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAG,CAC3D,CAAC;aACL;SACF;;;OAAA;;;;IAQD,iCAAW;;;IAAX;QACE,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;SACrC;QAED,IAAI,OAAO,IAAI,CAAC,iBAAiB,KAAK,UAAU,EAAE;YAChD,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;KACF;;;;IAED,wCAAkB;;;IAAlB;QAAA,iBAcC;QAbC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YACrB,KAAI,CAAC,UAAU,EAAE,CAAC;YAElB,IAAI,KAAI,CAAC,KAAK,EAAE;gBACd,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,UAAU,EAAE,GAAA,CAAC,CAAC;aACxE;YAED,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;gBACrB,KAAI,CAAC,gBAAgB,GAAG,mBAAC,KAAI,CAAC,IAAI,CAAC,YAAmB;qBACnD,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;qBACrB,SAAS,CAAC,UAAC,MAAW,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAA,CAAC,CAAC;aACrD,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;;;;;;IAEO,iCAAW;;;;;cAAC,IAAc,EAAE,WAAgB;;;QAClD,IAAM,KAAK,GAAG,IAAI,KAAK,EAAe,CAAC;QAEvC,IAAI,WAAW,YAAY,SAAS,EAAE;YACpC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,KAAK;;oBACpC,KAAgB,IAAA,KAAAA,SAAA,KAAI,CAAC,WAAW,CAAC,mBAAC,IAAW,GAAE,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,gBAAA;wBAA7D,IAAM,CAAC,WAAA;wBACV,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACf;;;;;;;;;;aACF,CAAC,CAAC;SACJ;aAAM,IAAI,WAAW,YAAY,SAAS,EAAE;;gBAC3C,KAAgB,IAAA,KAAAA,SAAA,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA,gBAAA;oBAA5C,IAAM,CAAC,WAAA;oBACV,KAAK,CAAC,IAAI,CAAC;wBACT,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,OAAO,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACjC,CAAC,CAAC;iBACJ;;;;;;;;;SACF;aAAM,IACL,WAAW,YAAY,SAAS;YAChC,WAAW,YAAY,WACzB,EAAE;YACA,OAAO,CAAC,EAAE,IAAI,MAAA,EAAE,OAAO,oBAAE,WAAkB,CAAA,EAAE,CAAC,CAAC;SAChD;aAAM;YACL,MAAM,IAAI,KAAK,CACb,mCAAiC,WAAW,CAAC,WAAW,CAAC,IAAM,CAChE,CAAC;SACH;QAED,OAAO,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC;;YACnB,IAAM,MAAM,GAAG,mBAAC,CAAC,CAAC,OAAc,GAAE,OAAO,CAAC;YAC1C,OAAO,MAAM,KAAK,KAAI,CAAC,IAAI,CAAC,OAAO,IAAI,MAAM,KAAK,KAAI,CAAC,IAAI,CAAC;SAC7D,CAAC,CAAC;;;;;;IAGG,gCAAU;;;;;;QAChB,IAAM,WAAW,GACf,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,SAAS,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;;QAElE,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QAEnD,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;YACR,IAAA,aAAI,EAAE,mBAAO,CAAO;;YAE5B,IAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,KAAI,CAAC,QAAQ,EAAE,EAAE,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAEjE,IAAI,OAAO,CAAC,KAAK,KAAK,KAAK,EAAE;gBAC3B,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACzB;SACF,CAAC,CAAC;;;;;;IAGG,6BAAO;;;;cAAC,KAAU;QACxB,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACtD;;;;;IAGK,8BAAQ;;;;QACd,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC9B;;;0BA5FF,KAAK;;sBA9CR;;;;;;;;ICQ8CD,4CAAW;IAGvD,kCAAsB,KAAgB;QAAtC,YACE,iBAAO,SACR;QAFqB,WAAK,GAAL,KAAK,CAAW;;KAErC;;gBANF,SAAS,SAAC,EAAE,QAAQ,EAAE,0BAA0B,EAAE;;;;gBAL1C,SAAS;;;4BAOf,KAAK;;mCATR;EAQ8C,WAAW;;;;;;;ICCnBA,oCAAW;IAC/C,0BAAsB,KAAgB,EAAY,IAAY;QAA9D,YACE,iBAAO,SACR;QAFqB,WAAK,GAAL,KAAK,CAAW;QAAY,UAAI,GAAJ,IAAI,CAAQ;;KAE7D;;gBAJF,SAAS,SAAC,EAAE,QAAQ,EAAE,gCAAgC,EAAE;;;;gBAJhD,SAAS;gBAFT,MAAM;;2BAFf;EASsC,WAAW;;;;;;;ACJjD,IAAM,YAAY,GAAG,CAAC,gBAAgB,EAAE,wBAAwB,CAAC,CAAC;;;;;gBAEjE,QAAQ,SAAC;oBACR,YAAY,WAAM,YAAY,CAAC;oBAC/B,OAAO,WAAM,YAAY,CAAC;iBAC3B;;mCAVD;;;;;;;;;;;;;;;;;ACSA,qBAA4B,IAAY,EAAE,MAAwB;IAChE,iBAAY,MAAM,CAAC,IAAI,IAAI,EAAE,IAAG,IAAI,GAAE;CACvC;;;;;;ACXD,IAAA;IACE,8BAAmB,SAAc,EAAS,KAAa,EAAS,IAAS;QAAtD,cAAS,GAAT,SAAS,CAAK;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAK;KAAI;+BAD/E;IAEC;;;;;;;IC4C0CA,yCAAgB;IAQzD,+BAIU,MAAwB,EAIxB,aAAoB,EAIpB,kBAAyB,EACzB,YACA,aACA,kBACA;QAhBV,YAkBE,iBAAO,SAOR;QArBS,YAAM,GAAN,MAAM,CAAkB;QAIxB,mBAAa,GAAb,aAAa,CAAO;QAIpB,wBAAkB,GAAlB,kBAAkB,CAAO;QACzB,gBAAU,GAAV,UAAU;QACV,iBAAW,GAAX,WAAW;QACX,sBAAgB,GAAhB,gBAAgB;QAChB,WAAK,GAAL,KAAK;sBApBC,IAAI,SAAS,CAAC,EAAE,CAAC;QAwB/B,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,CAAC,UAAA,KAAK;YACjD,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC;SAAA,CACvB,CAAC;QAEF,KAAI,CAAC,iBAAiB,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;;KACpC;IAED,sBACI,iDAAc;;;;;QADlB,UACmB,UAAe;YAChC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC;YAEtB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SACxC;;;OAAA;;;;IAED,wCAAQ;;;IAAR;QACE,IAAI,CAAC,aAAa,CAAC,UAAU,mBAAC,IAAW,EAAC,CAAC;KAC5C;IAED,sBAAI,uCAAI;;;;QAAR;YACE,OAAO,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;SACvB;;;OAAA;IAED,sBAAI,0CAAO;;;;QAAX;YACE,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB;;;OAAA;IAED,sBAAI,gDAAa;;;;QAAjB;YACE,yBAAO,IAAI,CAAC,MAAM,CAAC,aAAmC,EAAC;SACxD;;;OAAA;IAED,sBAAI,uCAAI;;;;QAAR;YACE,OAAO,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;SAC3D;;;OAAA;IAED,sBAAI,4CAAS;;;;QAAb;YACE,OAAO,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC/C;;;OAAA;IAED,sBAAI,iDAAc;;;;QAAlB;YACE,OAAO,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SACzD;;;OAAA;;;;IAED,sDAAsB;;;IAAtB;;KAEC;;;;IAED,2CAAW;;;IAAX;QACE,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;;;;;IAEO,0CAAU;;;;cAAC,KAAU;QAC3B,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7C,OAAO;SACR;;QAED,IAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;QAE1E,IAAI,KAAK,GAAG,CAAC,CAAC;;YAEd,KAAoB,IAAA,aAAAC,SAAA,QAAQ,CAAA,kCAAA;gBAAvB,IAAM,KAAK,qBAAA;;gBACd,IAAM,OAAO,GACX,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,KAAK;yCAC/B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAE/B;sBACD,IAAI,CAAC;gBAEX,IAAI,OAAO,IAAI,IAAI,EAAE;;oBACnB,IAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAG9D,IAAI,CAAC,WAAW,EAChB,IAAI,oBAAoB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAC7C,KAAK,CACN,CAAC;oBAEF,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;oBAE9C,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,KAAK,EACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CACzD,CAAC;iBACH;qBAAM;oBACL,MAAM,CAAC,MAAM,CACX,OAAO,CAAC,OAAO,EACf,IAAI,oBAAoB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAC9C,CAAC;iBACH;gBAED,EAAE,KAAK,CAAC;aACT;;;;;;;;;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,KAAK,EAAE;YAC3C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAChE;;;;;;;IAGK,iDAAiB;;;;cAAC,KAAU;QAClC,KAAK,CAAC,eAAe,GAAG,cAAM,OAAA,SAAS,GAAA,CAAC;QACxC,KAAK,CAAC,gBAAgB,GAAG,cAAM,OAAA,SAAS,GAAA,CAAC;QAEzC,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;YAC5B,cAAc,EAAE;gBACd,KAAK,EAAE,IAAI,CAAC,aAAa,IAAI,EAAE;aAChC;YACD,mBAAmB,EAAE;gBACnB,KAAK,EAAE,IAAI,CAAC,kBAAkB,IAAI,EAAE;aACrC;SACF,CAAC,CAAC;;;;;;IAGG,uDAAuB;;;;cAAC,OAAY;;;QAC1C,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aACtC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAA,CAAC;aAC1B,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,YAAY,YAAY,GAAA,CAAC,CAAC;QAE1C,MAAM,CAAC,OAAO,CAAC,UAAA,CAAC;YACd,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAAE;gBACzB,OAAO,EAAE;oBACP,KAAK,EAAE,KAAI;iBACZ;gBACD,gBAAgB,EAAE;oBAChB,KAAK,EAAE,cAAM,OAAA,SAAS,GAAA;iBACvB;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;;;;;;;IAGG,yCAAS;;;;;cACf,MAA6B,EAC7B,SAAc;;;QAEd,IAAM,YAAY,GAAG;;YACnB,IAAM,OAAO,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;YACtC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC1B,OAAO,OAAO,CAAC;SAChB,CAAC;QAEF,IAAI,SAAS,IAAI,IAAI,EAAE;YACrB,OAAO,YAAY,EAAE,CAAC;SACvB;QAED,IAAI,OAAO,SAAS,CAAC,IAAI,KAAK,UAAU,EAAE;YACxC,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;SAC9B;QAED,QAAQ,OAAO,SAAS;YACtB,KAAK,QAAQ,CAAC;YACd,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS;gBACZ,OAAO,YAAY,EAAE,CAAC;SACzB;;QAED,IAAM,OAAO,GAAG,UAAC,QAAa;;YAC5B,IAAM,KAAK,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;YAEhC,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAE9B,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACrC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aACnB;;gBAED,KAAoB,IAAA,aAAAA,SAAA,QAAQ,CAAA,kCAAA;oBAAvB,IAAM,KAAK,qBAAA;;oBACd,IAAM,WAAW,GAAG,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;oBACjD,IAAI,WAAW,EAAE;wBACf,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;qBACzB;iBACF;;;;;;;;;YAED,OAAO,KAAK,CAAC;;SACd,CAAC;;QAEF,IAAM,SAAS,GAAG,UAAC,KAAU;;YAC3B,IAAM,KAAK,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;YAChC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;;gBAExB,KAAkB,IAAA,KAAAA,SAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,gBAAA;oBAA/B,IAAM,GAAG,WAAA;;oBACZ,IAAM,WAAW,GAAG,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtD,IAAI,WAAW,EAAE;wBACf,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;qBACpC;iBACF;;;;;;;;;YAED,OAAO,KAAK,CAAC;;SACd,CAAC;QAEF,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC5B,OAAO,OAAO,mBAAC,SAAkB,EAAC,CAAC;SACpC;aAAM,IAAI,SAAS,YAAY,GAAG,EAAE;YACnC,OAAO,OAAO,mBAAC,SAAqB,EAAC,CAAC;SACvC;aAAM,IAAI,SAAS,YAAY,GAAG,EAAE;YACnC,OAAO,SAAS,mBAAC,SAA6B,EAAC,CAAC;SACjD;aAAM,IAAI,SAAS,YAAY,MAAM,EAAE;YACtC,OAAO,SAAS,CAAC,SAAS,CAAC,CAAC;SAC7B;aAAM;YACL,MAAM,IAAI,KAAK,CACb,mCAAiC,OAAO,SAAS,WAAM,SAAS,CAAC,QAAQ,EAAE,qBAAkB,CAC9F,CAAC;SACH;;;gBAjPJ,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,gBAAgB;4BACzB,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,qBAAqB,GAAA,CAAC;yBACrD;qBACF;iBACF;;;;gBA3BC,gBAAgB,uBAqCb,QAAQ,YACR,IAAI,YACJ,QAAQ;4CAER,QAAQ,YACR,IAAI,YACJ,MAAM,SAAC,aAAa;4CAEpB,QAAQ,YACR,IAAI,YACJ,MAAM,SAAC,mBAAmB;gBAlCtB,WAAW;gBAnBlB,WAAW;gBACX,gBAAgB;gBAmBT,SAAS;;;iCAiDf,KAAK;;gCAjFR;EA8C2C,gBAAgB;;;;;;;AC1C3D,IAAME,cAAY,GAAG,CAAC,qBAAqB,CAAC,CAAC;;;;;gBAE5C,QAAQ,SAAC;oBACR,YAAY,WAAMA,cAAY,CAAC;oBAC/B,OAAO,WAAMA,cAAY,CAAC;iBAC3B;;wCATD;;;;;;;;;;;;ACAA;;;;AAQA,0BAAiC,OAAqB;IACpD,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;CAC/B;;;;;gBAEA,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,WAAW;wBACX,mBAAmB;wBACnB,wBAAwB;wBACxB,6BAA6B;qBAC9B;oBACD,OAAO,EAAE,CAAC,wBAAwB,EAAE,6BAA6B,CAAC;oBAClE,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,SAAS;4BAClB,UAAU,EAAE,gBAAgB;4BAC5B,IAAI,EAAE,CAAC,OAAO,CAAC;yBAChB;qBACF;iBACF;;4BA3BD;;;;;;;;;;;;;;;"}

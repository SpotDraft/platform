{"version":3,"file":"angular-redux-form.js.map","sources":["ng://@angular-redux/form/compose-reducers.ts","ng://@angular-redux/form/form-store.ts","ng://@angular-redux/form/form-exception.ts","ng://@angular-redux/form/state.ts","ng://@angular-redux/form/form-reducer.ts","ng://@angular-redux/form/configure.ts","ng://@angular-redux/form/connect/connect-base.ts","ng://@angular-redux/form/connect/connect-reactive.ts","ng://@angular-redux/form/connect/connect.ts","ng://@angular-redux/form/connect/connect.module.ts","ng://@angular-redux/form/shims.ts","ng://@angular-redux/form/connect-array/connect-array-template.ts","ng://@angular-redux/form/connect-array/connect-array.ts","ng://@angular-redux/form/connect-array/connect-array.module.ts","ng://@angular-redux/form/module.ts"],"sourcesContent":["import { AnyAction, Reducer } from 'redux';\n\nexport const composeReducers = <State>(\n  ...reducers: Reducer<State, AnyAction>[]\n): Reducer<State, AnyAction> => (s: any, action: AnyAction) =>\n  reducers.reduce((st, reducer) => reducer(st, action), s);\n","import { Injectable } from '@angular/core';\n\nimport { NgForm } from '@angular/forms';\n\nimport { NgRedux } from '@angular-redux/store';\n\nimport { Action, Unsubscribe } from 'redux';\n\nexport interface AbstractStore<RootState> {\n  /// Dispatch an action\n  dispatch(action: Action & { payload: any }): void;\n\n  /// Retrieve the current application state\n  getState(): RootState;\n\n  /// Subscribe to changes in the store\n  subscribe(fn: (state: RootState) => void): Unsubscribe;\n}\n\nexport const FORM_CHANGED = '@@angular-redux/form/FORM_CHANGED';\n\n@Injectable()\nexport class FormStore {\n  /// NOTE(cbond): The declaration of store is misleading. This class is\n  /// actually capable of taking a plain Redux store or an NgRedux instance.\n  /// But in order to make the ng dependency injector work properly, we\n  /// declare it as an NgRedux type, since the @angular-redux/store use case involves\n  /// calling the constructor of this class manually (from configure.ts),\n  /// where a plain store can be cast to an NgRedux. (For our purposes, they\n  /// have almost identical shapes.)\n  constructor(private store: NgRedux<any>) {}\n\n  getState() {\n    return this.store.getState();\n  }\n\n  subscribe(fn: (state: any) => void): Unsubscribe {\n    return this.store.subscribe(() => fn(this.getState()));\n  }\n\n  valueChanged<T>(path: string[], form: NgForm, value: T) {\n    this.store.dispatch({\n      type: FORM_CHANGED,\n      payload: {\n        path,\n        form,\n        valid: form.valid === true,\n        value,\n      },\n    });\n  }\n}\n","export class FormException extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","import { Iterable, Map as ImmutableMap } from 'immutable';\n\nimport { FormException } from './form-exception';\n\nexport interface Operations<T> {\n  /// Shallow clone the object\n  clone(): T;\n\n  /// Clone and merge\n  merge(key: number | string | null, value: T): any;\n\n  /// Clone the object and update a specific key inside of it\n  update(key: number | string | null, value: T): any;\n}\n\nexport type TraverseCallback = (\n  parent: any,\n  key: number | string,\n  remainingPath: string[],\n  value?: any,\n) => any;\n\nexport abstract class State {\n  static traverse<StateType>(\n    state: StateType,\n    path: string[],\n    fn?: TraverseCallback,\n  ) {\n    let deepValue = state;\n\n    for (const k of path) {\n      const parent = deepValue;\n\n      if (Iterable.isIterable(deepValue)) {\n        const m = (deepValue as any) as ImmutableMap<string, any>;\n        if (typeof m.get === 'function') {\n          deepValue = m.get(k);\n        } else {\n          throw new FormException(\n            `Cannot retrieve value from immutable nonassociative container: ${k}`,\n          );\n        }\n      } else if (deepValue instanceof Map) {\n        deepValue = ((deepValue as any) as Map<string, any>).get(k);\n      } else {\n        deepValue = (deepValue as any)[k];\n      }\n\n      if (typeof fn === 'function') {\n        const transformed = fn(\n          parent,\n          k,\n          path.slice(path.indexOf(k) + 1),\n          deepValue,\n        );\n\n        deepValue = transformed[k];\n\n        Object.assign(parent, transformed);\n      }\n\n      // If we were not able to find this state inside of our root state\n      // structure, then we return undefined -- not null -- to indicate that\n      // state. But this could be a perfectly normal use-case so we don't\n      // want to throw an exception or anything along those lines.\n      if (deepValue === undefined) {\n        return undefined;\n      }\n    }\n\n    return deepValue;\n  }\n\n  static get<StateType>(state: StateType, path: string[]): any {\n    return State.traverse(state, path);\n  }\n\n  static assign<StateType>(state: StateType, path: string[], value?: any) {\n    const operations = State.inspect(state);\n\n    if (path.length === 0) {\n      return operations.update(null, value);\n    }\n\n    const root = operations.clone();\n\n    // We want to shallow clone the object, and then trace a path to the place\n    // we want to update, cloning each object we traversed on our way and then\n    // finally updating the value on the last parent to be @value. This seems\n    // to offer the best performance: we can shallow clone everything that has\n    // not been modified, and {deep clone + update} the path down to the value\n    // that we wish to update.\n    State.traverse(\n      root,\n      path,\n      (parent, key: number | string, remainingPath: string[], innerValue?) => {\n        const parentOperations = State.inspect(parent);\n\n        if (innerValue) {\n          const innerOperations = State.inspect(innerValue);\n\n          return parentOperations.update(\n            key,\n            remainingPath.length > 0\n              ? innerOperations.clone()\n              : innerOperations.merge(null, value),\n          );\n        } else {\n          const getProbableType = (stateKey: string | number) => {\n            // NOTE(cbond): If your code gets here, you might not be using the library\n            /// correctly. If you are assigning into a path in your state, try to\n            /// ensure that there is a path to traverse, even if everything is just\n            /// empty objects and arrays. If we have to guess the type of the containers\n            /// and then create them ourselves, we may not get the types right. Use\n            /// the Redux `initial state' construct to resolve this issue if you like.\n            return typeof stateKey === 'number'\n              ? new Array()\n              : Array.isArray(stateKey)\n                ? ImmutableMap()\n                : new Object();\n          };\n\n          return parentOperations.update(\n            key,\n            remainingPath.length > 0\n              ? getProbableType(remainingPath[0])\n              : value,\n          );\n        }\n      },\n    );\n\n    return root;\n  }\n\n  static inspect<K>(object: K): Operations<K> {\n    const metaOperations = (\n      // TODO: Write proper type declarations for following Function types\n      update: Function,\n      merge: Function,\n      clone?: Function,\n    ) => {\n      const operations = {\n        /// Clone the object (shallow)\n        clone:\n          typeof clone === 'function'\n            ? () => clone(object as any) as any\n            : () => object,\n\n        /// Update a specific key inside of the container object\n        update: (key: string, value: K) =>\n          update(operations.clone(), key, value),\n\n        /// Merge existing values with new values\n        merge: (key: string, value: K) => {\n          const cloned = operations.clone();\n          return merge(cloned, key, value, (v: any) => update(cloned, key, v));\n        },\n      };\n\n      return operations;\n    };\n\n    if (Iterable.isIterable(object)) {\n      return metaOperations(\n        // Replace\n        (parent: any, key: number | string, value: K) => {\n          if (key != null) {\n            return parent.set(key, value);\n          } else {\n            return value;\n          }\n        },\n        // Merge\n        (parent: any, key: number | string | string[], value: K) => {\n          if (key) {\n            return parent.mergeDeepIn(Array.isArray(key) ? key : [key], value);\n          } else {\n            if (ImmutableMap.isMap(value)) {\n              return parent.mergeDeep(value);\n            } else {\n              return parent.concat(value);\n            }\n          }\n        },\n      );\n    } else if (Array.isArray(object)) {\n      return metaOperations(\n        // Replace array contents\n        (parent: any, key: number, value: K) => {\n          if (key != null) {\n            parent[key] = value;\n          } else {\n            parent.splice.apply(\n              parent,\n              [0, parent.length].concat(Array.isArray(value) ? value : [value]),\n            );\n          }\n        },\n\n        // Merge\n        (parent: any, _: any, value: K, setter: (v: K) => K) => {\n          setter(parent.concat(value));\n          return parent;\n        },\n\n        // Clone\n        () => Array.prototype.slice.call(object, 0),\n      );\n    } else if (object instanceof Map) {\n      return metaOperations(\n        // Update map key\n        (parent: any, key: number | string, value: K) => {\n          if (key != null) {\n            return parent.set(key, value);\n          } else {\n            const m = new Map(value as any);\n            parent.clear();\n            m.forEach((mapValue, index) => parent.set(index, mapValue));\n            return parent;\n          }\n        },\n\n        // Merge\n        (parent: Map<string, any>, _: any, value: K) => {\n          const m = new Map<string, any>(value as any);\n          m.forEach((mapValue, key) => parent.set(key, mapValue));\n          return parent;\n        },\n\n        // Clone\n        () =>\n          object instanceof WeakMap\n            ? new WeakMap<object, any>(object as any)\n            : new Map<string, any>(object as any),\n      );\n    } else if (object instanceof WeakSet || object instanceof Set) {\n      return metaOperations(\n        // Update element at index in set\n        (parent: any, key: number, value: K) => {\n          if (key != null) {\n            return parent.set(key, value);\n          } else {\n            const s = new Set(value as any);\n            s.forEach((setValue, index) => parent.set(index, setValue));\n            s.clear();\n            return parent;\n          }\n        },\n\n        // Merge\n        (parent: Set<any>, _: any, value: any) => {\n          for (const element of value) {\n            parent.add(element);\n          }\n          return parent;\n        },\n\n        // Clone\n        () =>\n          object instanceof WeakSet\n            ? new WeakSet<any>(object as any)\n            : new Set<any>(object as any),\n      );\n    } else if (object instanceof Date) {\n      throw new FormException(\n        'Cannot understand why a Date object appears in the mutation path!',\n      );\n    } else {\n      switch (typeof object) {\n        case 'boolean':\n        case 'function':\n        case 'number':\n        case 'string':\n        case 'symbol':\n        case 'undefined':\n          break;\n        case 'object':\n          if (object == null) {\n            break;\n          }\n          return metaOperations(\n            (parent: any, key: any, value: K) => {\n              if (key != null) {\n                return { ...parent, [key]: value };\n              }\n              return { ...parent, ...(value as any) };\n            },\n            (parent: any, _: any, value: K) => {\n              for (const k of Object.keys(value)) {\n                parent[k] = (value as any)[k];\n              }\n              return parent;\n            },\n            () => ({ ...(object as any) }),\n          );\n        default:\n          break;\n      }\n    }\n\n    throw new Error(\n      `An object of type ${typeof object} has appeared in the mutation path! Every element ` +\n        'in the mutation path should be an array, an associative container, or a set',\n    );\n  }\n\n  static empty(value: any): boolean {\n    return (\n      value == null ||\n      (value.length === 0 ||\n        (typeof value.length === 'undefined' &&\n          Object.keys(value).length === 0))\n    );\n  }\n}\n","import { Iterable } from 'immutable';\n\nimport { Action } from 'redux';\n\nimport { FORM_CHANGED } from './form-store';\n\nimport { State } from './state';\n\nexport const defaultFormReducer = <RootState>(\n  initialState?: RootState | Iterable.Keyed<string, any>,\n) => {\n  const reducer = (\n    state: RootState | Iterable.Keyed<string, any> | undefined = initialState,\n    action: Action & { payload?: any },\n  ) => {\n    switch (action.type) {\n      case FORM_CHANGED:\n        return State.assign(state, action.payload.path, action.payload.value);\n      default:\n        return state;\n    }\n  };\n\n  return reducer;\n};\n","import { Action, Store } from 'redux';\n\nimport { AbstractStore, FormStore } from './form-store';\n\n/// Use this function in your providers list if you are not using @angular-redux/core.\n/// This will allow you to provide a preexisting store that you have already\n/// configured, rather than letting @angular-redux/core create one for you.\nexport const provideReduxForms = <T>(store: Store<T> | any) => {\n  const abstractStore = wrap(store);\n\n  return [\n    { provide: FormStore, useValue: new FormStore(abstractStore as any) },\n  ];\n};\n\nconst wrap = <T>(store: Store<T> | any): AbstractStore<T> => {\n  const dispatch = (action: Action) => store.dispatch(action);\n\n  const getState = () => store.getState() as T;\n\n  const subscribe = (fn: (state: T) => void) =>\n    store.subscribe(() => fn(store.getState()));\n\n  return { dispatch, getState, subscribe };\n};\n","import { AfterContentInit, Input, OnDestroy } from '@angular/core';\n\nimport {\n  AbstractControl,\n  FormArray,\n  FormControl,\n  FormGroup,\n  NgControl,\n} from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { Unsubscribe } from 'redux';\n\nimport { debounceTime } from 'rxjs/operators';\n\nimport { FormStore } from '../form-store';\nimport { State } from '../state';\n\nexport interface ControlPair {\n  path: string[];\n  control: AbstractControl;\n}\n\nexport class ConnectBase implements OnDestroy, AfterContentInit {\n  get path(): string[] {\n    const path =\n      typeof this.connect === 'function' ? this.connect() : this.connect;\n\n    switch (typeof path) {\n      case 'object':\n        if (State.empty(path)) {\n          return [];\n        }\n        if (Array.isArray(path)) {\n          return path as string[];\n        }\n      case 'string':\n        return (path as string).split(/\\./g);\n      default:\n        // fallthrough above (no break)\n        throw new Error(\n          `Cannot determine path to object: ${JSON.stringify(path)}`,\n        );\n    }\n  }\n  @Input() connect?: () => (string | number) | (string | number)[];\n  protected store?: FormStore;\n  protected form: any;\n  private stateSubscription?: Unsubscribe;\n\n  private formSubscription?: Subscription;\n\n  ngOnDestroy() {\n    if (this.formSubscription) {\n      this.formSubscription.unsubscribe();\n    }\n\n    if (typeof this.stateSubscription === 'function') {\n      this.stateSubscription(); // unsubscribe\n    }\n  }\n\n  ngAfterContentInit() {\n    Promise.resolve().then(() => {\n      this.resetState();\n\n      if (this.store) {\n        this.stateSubscription = this.store.subscribe(() => this.resetState());\n      }\n\n      Promise.resolve().then(() => {\n        this.formSubscription = (this.form.valueChanges as any)\n          .pipe(debounceTime(0))\n          .subscribe((values: any) => this.publish(values));\n      });\n    });\n  }\n\n  private descendants(path: string[], formElement: any): ControlPair[] {\n    const pairs = new Array<ControlPair>();\n\n    if (formElement instanceof FormArray) {\n      formElement.controls.forEach((c, index) => {\n        for (const d of this.descendants((path as any).concat([index]), c)) {\n          pairs.push(d);\n        }\n      });\n    } else if (formElement instanceof FormGroup) {\n      for (const k of Object.keys(formElement.controls)) {\n        pairs.push({\n          path: path.concat([k]),\n          control: formElement.controls[k],\n        });\n      }\n    } else if (\n      formElement instanceof NgControl ||\n      formElement instanceof FormControl\n    ) {\n      return [{ path, control: formElement as any }];\n    } else {\n      throw new Error(\n        `Unknown type of form element: ${formElement.constructor.name}`,\n      );\n    }\n\n    return pairs.filter(p => {\n      const parent = (p.control as any)._parent;\n      return parent === this.form.control || parent === this.form;\n    });\n  }\n\n  private resetState() {\n    const formElement =\n      this.form.control === undefined ? this.form : this.form.control;\n\n    const children = this.descendants([], formElement);\n\n    children.forEach(c => {\n      const { path, control } = c;\n\n      const value = State.get(this.getState(), this.path.concat(path));\n\n      if (control.value !== value) {\n        control.setValue(value);\n      }\n    });\n  }\n\n  private publish(value: any) {\n    if (this.store) {\n      this.store.valueChanged(this.path, this.form, value);\n    }\n  }\n\n  private getState() {\n    if (this.store) {\n      return this.store.getState();\n    }\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { FormStore } from '../form-store';\n\nimport { ConnectBase } from './connect-base';\n\n// For reactive forms (without implicit NgForm)\n@Directive({ selector: 'form[connect][formGroup]' })\nexport class ReactiveConnectDirective extends ConnectBase {\n  @Input() formGroup: any;\n\n  constructor(protected store: FormStore) {\n    super();\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { NgForm } from '@angular/forms';\n\nimport { FormStore } from '../form-store';\nimport { ConnectBase } from './connect-base';\n\n// For template forms (with implicit NgForm)\n@Directive({ selector: 'form[connect]:not([formGroup])' })\nexport class ConnectDirective extends ConnectBase {\n  constructor(protected store: FormStore, protected form: NgForm) {\n    super();\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ConnectDirective } from './connect';\nimport { ReactiveConnectDirective } from './connect-reactive';\n\nconst declarations = [ConnectDirective, ReactiveConnectDirective];\n\n@NgModule({\n  declarations: [...declarations],\n  exports: [...declarations],\n})\nexport class NgReduxFormConnectModule {}\n","import {\n  CheckboxControlValueAccessor,\n  ControlContainer,\n  ControlValueAccessor,\n  RadioControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n} from '@angular/forms';\n\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  return [...(parent.path || []), name];\n}\n\nconst BUILTIN_ACCESSORS = [\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n];\n\nexport function isBuiltInAccessor(\n  valueAccessor: ControlValueAccessor,\n): boolean {\n  return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n","export class ConnectArrayTemplate {\n  constructor(public $implicit: any, public index: number, public item: any) {}\n}\n","import {\n  Directive,\n  EmbeddedViewRef,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  SkipSelf,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidatorFn,\n  ControlContainer,\n  FormArray,\n  FormControl,\n  FormGroup,\n  FormGroupDirective,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n  NgModelGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Unsubscribe } from 'redux';\n\nimport { ConnectBase } from '../connect';\nimport { FormStore } from '../form-store';\nimport { controlPath } from '../shims';\nimport { State } from '../state';\nimport { ConnectArrayTemplate } from './connect-array-template';\n\n@Directive({\n  selector: '[connectArray]',\n  providers: [\n    {\n      provide: ControlContainer,\n      useExisting: forwardRef(() => ConnectArrayDirective),\n    },\n  ],\n})\nexport class ConnectArrayDirective extends ControlContainer\n  implements OnInit, OnDestroy {\n  private stateSubscription: Unsubscribe;\n\n  private array = new FormArray([]);\n\n  private key?: string;\n\n  constructor(\n    @Optional()\n    @Host()\n    @SkipSelf()\n    private parent: ControlContainer,\n    @Optional()\n    @Self()\n    @Inject(NG_VALIDATORS)\n    private rawValidators: any[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    private rawAsyncValidators: any[],\n    private connection: ConnectBase,\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef,\n    private store: FormStore,\n  ) {\n    super();\n\n    this.stateSubscription = this.store.subscribe(state =>\n      this.resetState(state),\n    );\n\n    this.registerInternals(this.array);\n  }\n\n  @Input()\n  set connectArrayOf(collection: any) {\n    this.key = collection;\n\n    this.resetState(this.store.getState());\n  }\n\n  ngOnInit() {\n    this.formDirective.addControl(this as any);\n  }\n\n  get name(): string {\n    return this.key || '';\n  }\n\n  get control(): FormArray {\n    return this.array;\n  }\n\n  get formDirective(): FormGroupDirective {\n    return this.parent.formDirective as FormGroupDirective;\n  }\n\n  get path(): string[] {\n    return this.key ? controlPath(this.key, this.parent) : [];\n  }\n\n  get validator(): ValidatorFn | null {\n    return Validators.compose(this.rawValidators);\n  }\n\n  get asyncValidator(): AsyncValidatorFn | null {\n    return Validators.composeAsync(this.rawAsyncValidators);\n  }\n\n  updateValueAndValidity() {\n    // stub?\n  }\n\n  ngOnDestroy() {\n    this.viewContainerRef.clear();\n\n    if (this.key) {\n      this.formDirective.form.removeControl(this.key);\n    }\n\n    this.stateSubscription();\n  }\n\n  private resetState(state: any) {\n    if (this.key == null || this.key.length === 0) {\n      return; // no state to retreive if no key is set\n    }\n\n    const iterable = State.get(state, this.connection.path.concat(this.path));\n\n    let index = 0;\n\n    for (const value of iterable) {\n      const viewRef =\n        this.viewContainerRef.length > index\n          ? (this.viewContainerRef.get(index) as EmbeddedViewRef<\n              ConnectArrayTemplate\n            >)\n          : null;\n\n      if (viewRef == null) {\n        const embeddedViewRef = this.viewContainerRef.createEmbeddedView<\n          ConnectArrayTemplate\n        >(\n          this.templateRef,\n          new ConnectArrayTemplate(index, index, value),\n          index,\n        );\n\n        this.patchDescendantControls(embeddedViewRef);\n\n        this.array.insert(\n          index,\n          this.transform(this.array, embeddedViewRef.context.item),\n        );\n      } else {\n        Object.assign(\n          viewRef.context,\n          new ConnectArrayTemplate(index, index, value),\n        );\n      }\n\n      ++index;\n    }\n\n    while (this.viewContainerRef.length > index) {\n      this.viewContainerRef.remove(this.viewContainerRef.length - 1);\n    }\n  }\n\n  private registerInternals(array: any) {\n    array.registerControl = () => undefined;\n    array.registerOnChange = () => undefined;\n\n    Object.defineProperties(this, {\n      _rawValidators: {\n        value: this.rawValidators || [],\n      },\n      _rawAsyncValidators: {\n        value: this.rawAsyncValidators || [],\n      },\n    });\n  }\n\n  private patchDescendantControls(viewRef: any) {\n    const groups = Object.keys(viewRef._view)\n      .map(k => viewRef._view[k])\n      .filter(c => c instanceof NgModelGroup);\n\n    groups.forEach(c => {\n      Object.defineProperties(c, {\n        _parent: {\n          value: this,\n        },\n        _checkParentType: {\n          value: () => undefined,\n        },\n      });\n    });\n  }\n\n  private transform(\n    parent: FormGroup | FormArray,\n    reference: any,\n  ): AbstractControl {\n    const emptyControl = () => {\n      const control = new FormControl(null);\n      control.setParent(parent);\n      return control;\n    };\n\n    if (reference == null) {\n      return emptyControl();\n    }\n\n    if (typeof reference.toJS === 'function') {\n      reference = reference.toJS();\n    }\n\n    switch (typeof reference) {\n      case 'string':\n      case 'number':\n      case 'boolean':\n        return emptyControl();\n    }\n\n    const iterate = (iterable: any): FormArray => {\n      const array = new FormArray([]);\n\n      this.registerInternals(array);\n\n      for (let i = array.length; i > 0; i--) {\n        array.removeAt(i);\n      }\n\n      for (const value of iterable) {\n        const transformed = this.transform(array, value);\n        if (transformed) {\n          array.push(transformed);\n        }\n      }\n\n      return array;\n    };\n\n    const associate = (value: any): FormGroup => {\n      const group = new FormGroup({});\n      group.setParent(parent);\n\n      for (const key of Object.keys(value)) {\n        const transformed = this.transform(group, value[key]);\n        if (transformed) {\n          group.addControl(key, transformed);\n        }\n      }\n\n      return group;\n    };\n\n    if (Array.isArray(reference)) {\n      return iterate(reference as any[]);\n    } else if (reference instanceof Set) {\n      return iterate(reference as Set<any>);\n    } else if (reference instanceof Map) {\n      return associate(reference as Map<string, any>);\n    } else if (reference instanceof Object) {\n      return associate(reference);\n    } else {\n      throw new Error(\n        `Cannot convert object of type ${typeof reference} / ${reference.toString()} to form element`,\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ConnectArrayDirective } from './connect-array';\n\nconst declarations = [ConnectArrayDirective];\n\n@NgModule({\n  declarations: [...declarations],\n  exports: [...declarations],\n})\nexport class NgReduxFormConnectArrayModule {}\n","import { NgRedux } from '@angular-redux/store';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NgReduxFormConnectModule } from './connect';\nimport { NgReduxFormConnectArrayModule } from './connect-array';\nimport { FormStore } from './form-store';\n\nexport function formStoreFactory(ngRedux: NgRedux<any>) {\n  return new FormStore(ngRedux);\n}\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    NgReduxFormConnectModule,\n    NgReduxFormConnectArrayModule,\n  ],\n  exports: [NgReduxFormConnectModule, NgReduxFormConnectArrayModule],\n  providers: [\n    {\n      provide: FormStore,\n      useFactory: formStoreFactory,\n      deps: [NgRedux],\n    },\n  ],\n})\nexport class NgReduxFormModule {}\n"],"names":["ImmutableMap","declarations"],"mappings":"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"}

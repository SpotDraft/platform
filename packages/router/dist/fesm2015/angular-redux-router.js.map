{"version":3,"file":"angular-redux-router.js.map","sources":["ng://@angular-redux/router/actions.ts","ng://@angular-redux/router/reducer.ts","ng://@angular-redux/router/router.ts","ng://@angular-redux/router/index.ts"],"sourcesContent":["export const UPDATE_LOCATION: string = '@angular-redux/router::UPDATE_LOCATION';\n","import { Action } from 'redux';\n\nimport { UPDATE_LOCATION } from './actions';\n\nexport const DefaultRouterState: string = '';\n\nexport interface RouterAction extends Action {\n  payload?: string;\n}\n\nexport function routerReducer(\n  state: string = DefaultRouterState,\n  action: RouterAction,\n): string {\n  switch (action.type) {\n    case UPDATE_LOCATION:\n      return action.payload || DefaultRouterState;\n    default:\n      return state;\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Location } from '@angular/common';\nimport { ApplicationRef, Injectable } from '@angular/core';\nimport {\n  DefaultUrlSerializer,\n  NavigationCancel,\n  NavigationEnd,\n  Router,\n} from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { UPDATE_LOCATION } from './actions';\nimport { DefaultRouterState, RouterAction } from './reducer';\n\n@Injectable()\nexport class NgReduxRouter {\n  private initialized = false;\n  private currentLocation?: string;\n  private initialLocation?: string;\n  private urlState?: Observable<string>;\n\n  private urlStateSubscription?: Subscription;\n  private reduxSubscription?: Subscription;\n\n  constructor(\n    private router: Router,\n    private ngRedux: NgRedux<any>,\n    private applicationRef: ApplicationRef,\n    private location: Location,\n  ) {}\n\n  /**\n   * Destroys the bindings between @angular-redux/router and @angular/router.\n   * This method unsubscribes from both @angular-redux/router and @angular router, in case\n   * your app needs to tear down the bindings without destroying Angular or Redux\n   * at the same time.\n   */\n  destroy() {\n    if (this.urlStateSubscription) {\n      this.urlStateSubscription.unsubscribe();\n    }\n\n    if (this.reduxSubscription) {\n      this.reduxSubscription.unsubscribe();\n    }\n\n    this.initialized = false;\n  }\n\n  /**\n   * Initialize the bindings between @angular-redux/router and @angular/router\n   *\n   * This should only be called once for the lifetime of your app, for\n   * example in the constructor of your root component.\n   *\n   *\n   * @param selectLocationFromState Optional: If your\n   * router state is in a custom location, supply this argument to tell the\n   * bindings where to find the router location in the state.\n   * @param urlState$ Optional: If you have a custom setup\n   * when listening to router changes, or use a different router than @angular/router\n   * you can supply this argument as an Observable of the current url state.\n   */\n  initialize(\n    selectLocationFromState: (state: any) => string = state => state.router,\n    urlState$?: Observable<string> | undefined,\n  ) {\n    if (this.initialized) {\n      throw new Error(\n        '@angular-redux/router already initialized! If you meant to re-initialize, call destroy first.',\n      );\n    }\n\n    this.selectLocationFromState = selectLocationFromState;\n\n    this.urlState = urlState$ || this.getDefaultUrlStateObservable();\n\n    this.listenToRouterChanges();\n    this.listenToReduxChanges();\n    this.initialized = true;\n  }\n\n  private selectLocationFromState: (state: any) => string = state =>\n    state.router;\n\n  private getDefaultUrlStateObservable() {\n    return this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd),\n      map(event => this.location.path()),\n      distinctUntilChanged(),\n    );\n  }\n\n  private getLocationFromStore(useInitial: boolean = false) {\n    return (\n      this.selectLocationFromState(this.ngRedux.getState()) ||\n      (useInitial ? this.initialLocation : '')\n    );\n  }\n\n  private listenToRouterChanges() {\n    const handleLocationChange = (location: string) => {\n      if (this.currentLocation === location) {\n        // Dont dispatch changes if we haven't changed location.\n        return;\n      }\n\n      this.currentLocation = location;\n      if (this.initialLocation === undefined) {\n        this.initialLocation = location;\n\n        // Fetch initial location from store and make sure\n        // we dont dispath an event if the current url equals\n        // the initial url.\n        const locationFromStore = this.getLocationFromStore();\n        if (locationFromStore === this.currentLocation) {\n          return;\n        }\n      }\n\n      this.ngRedux.dispatch({\n        type: UPDATE_LOCATION,\n        payload: location,\n      });\n    };\n\n    if (this.urlState) {\n      this.urlStateSubscription = this.urlState.subscribe(handleLocationChange);\n    }\n  }\n\n  private listenToReduxChanges() {\n    const handleLocationChange = (location: string) => {\n      if (this.initialLocation === undefined) {\n        // Wait for router to set initial location.\n        return;\n      }\n\n      const locationInStore = this.getLocationFromStore(true);\n      if (this.currentLocation === locationInStore) {\n        // Dont change router location if its equal to the one in the store.\n        return;\n      }\n\n      this.currentLocation = location;\n      this.router.navigateByUrl(location);\n    };\n\n    this.reduxSubscription = this.ngRedux\n      .select(state => this.selectLocationFromState(state))\n      .pipe(distinctUntilChanged())\n      .subscribe(handleLocationChange);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UPDATE_LOCATION } from './actions';\nimport { RouterAction, routerReducer } from './reducer';\nimport { NgReduxRouter } from './router';\n\n@NgModule()\nexport class NgReduxRouterModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgReduxRouterModule,\n      providers: [NgReduxRouter],\n    };\n  }\n}\n\nexport { NgReduxRouter, RouterAction, routerReducer, UPDATE_LOCATION };\n"],"names":[],"mappings":"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"}

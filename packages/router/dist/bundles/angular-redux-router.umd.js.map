{"version":3,"file":"angular-redux-router.umd.js.map","sources":["ng://@angular-redux/router/actions.ts","ng://@angular-redux/router/reducer.ts","ng://@angular-redux/router/router.ts","ng://@angular-redux/router/index.ts"],"sourcesContent":["export const UPDATE_LOCATION: string = '@angular-redux/router::UPDATE_LOCATION';\n","import { Action } from 'redux';\n\nimport { UPDATE_LOCATION } from './actions';\n\nexport const DefaultRouterState: string = '';\n\nexport interface RouterAction extends Action {\n  payload?: string;\n}\n\nexport function routerReducer(\n  state: string = DefaultRouterState,\n  action: RouterAction,\n): string {\n  switch (action.type) {\n    case UPDATE_LOCATION:\n      return action.payload || DefaultRouterState;\n    default:\n      return state;\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Location } from '@angular/common';\nimport { ApplicationRef, Injectable } from '@angular/core';\nimport {\n  DefaultUrlSerializer,\n  NavigationCancel,\n  NavigationEnd,\n  Router,\n} from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { UPDATE_LOCATION } from './actions';\nimport { DefaultRouterState, RouterAction } from './reducer';\n\n@Injectable()\nexport class NgReduxRouter {\n  private initialized = false;\n  private currentLocation?: string;\n  private initialLocation?: string;\n  private urlState?: Observable<string>;\n\n  private urlStateSubscription?: Subscription;\n  private reduxSubscription?: Subscription;\n\n  constructor(\n    private router: Router,\n    private ngRedux: NgRedux<any>,\n    private applicationRef: ApplicationRef,\n    private location: Location,\n  ) {}\n\n  /**\n   * Destroys the bindings between @angular-redux/router and @angular/router.\n   * This method unsubscribes from both @angular-redux/router and @angular router, in case\n   * your app needs to tear down the bindings without destroying Angular or Redux\n   * at the same time.\n   */\n  destroy() {\n    if (this.urlStateSubscription) {\n      this.urlStateSubscription.unsubscribe();\n    }\n\n    if (this.reduxSubscription) {\n      this.reduxSubscription.unsubscribe();\n    }\n\n    this.initialized = false;\n  }\n\n  /**\n   * Initialize the bindings between @angular-redux/router and @angular/router\n   *\n   * This should only be called once for the lifetime of your app, for\n   * example in the constructor of your root component.\n   *\n   *\n   * @param selectLocationFromState Optional: If your\n   * router state is in a custom location, supply this argument to tell the\n   * bindings where to find the router location in the state.\n   * @param urlState$ Optional: If you have a custom setup\n   * when listening to router changes, or use a different router than @angular/router\n   * you can supply this argument as an Observable of the current url state.\n   */\n  initialize(\n    selectLocationFromState: (state: any) => string = state => state.router,\n    urlState$?: Observable<string> | undefined,\n  ) {\n    if (this.initialized) {\n      throw new Error(\n        '@angular-redux/router already initialized! If you meant to re-initialize, call destroy first.',\n      );\n    }\n\n    this.selectLocationFromState = selectLocationFromState;\n\n    this.urlState = urlState$ || this.getDefaultUrlStateObservable();\n\n    this.listenToRouterChanges();\n    this.listenToReduxChanges();\n    this.initialized = true;\n  }\n\n  private selectLocationFromState: (state: any) => string = state =>\n    state.router;\n\n  private getDefaultUrlStateObservable() {\n    return this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd),\n      map(event => this.location.path()),\n      distinctUntilChanged(),\n    );\n  }\n\n  private getLocationFromStore(useInitial: boolean = false) {\n    return (\n      this.selectLocationFromState(this.ngRedux.getState()) ||\n      (useInitial ? this.initialLocation : '')\n    );\n  }\n\n  private listenToRouterChanges() {\n    const handleLocationChange = (location: string) => {\n      if (this.currentLocation === location) {\n        // Dont dispatch changes if we haven't changed location.\n        return;\n      }\n\n      this.currentLocation = location;\n      if (this.initialLocation === undefined) {\n        this.initialLocation = location;\n\n        // Fetch initial location from store and make sure\n        // we dont dispath an event if the current url equals\n        // the initial url.\n        const locationFromStore = this.getLocationFromStore();\n        if (locationFromStore === this.currentLocation) {\n          return;\n        }\n      }\n\n      this.ngRedux.dispatch({\n        type: UPDATE_LOCATION,\n        payload: location,\n      });\n    };\n\n    if (this.urlState) {\n      this.urlStateSubscription = this.urlState.subscribe(handleLocationChange);\n    }\n  }\n\n  private listenToReduxChanges() {\n    const handleLocationChange = (location: string) => {\n      if (this.initialLocation === undefined) {\n        // Wait for router to set initial location.\n        return;\n      }\n\n      const locationInStore = this.getLocationFromStore(true);\n      if (this.currentLocation === locationInStore) {\n        // Dont change router location if its equal to the one in the store.\n        return;\n      }\n\n      this.currentLocation = location;\n      this.router.navigateByUrl(location);\n    };\n\n    this.reduxSubscription = this.ngRedux\n      .select(state => this.selectLocationFromState(state))\n      .pipe(distinctUntilChanged())\n      .subscribe(handleLocationChange);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UPDATE_LOCATION } from './actions';\nimport { RouterAction, routerReducer } from './reducer';\nimport { NgReduxRouter } from './router';\n\n@NgModule()\nexport class NgReduxRouterModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgReduxRouterModule,\n      providers: [NgReduxRouter],\n    };\n  }\n}\n\nexport { NgReduxRouter, RouterAction, routerReducer, UPDATE_LOCATION };\n"],"names":["router","filter","NavigationEnd","map","distinctUntilChanged","Injectable","Router","NgRedux","ApplicationRef","Location","NgModule"],"mappings":";;;;;;;;;;;AAAA,QAAa,eAAe,GAAW,wCAAwC;;;;;;ACE/E;AAEA,QAAa,kBAAkB,GAAW,EAAE,CAAC;;;;;;AAM7C,2BACE,KAAkC,EAClC,MAAoB;QADpB,sBAAA;YAAA,0BAAkC;;QAGlC,QAAQ,MAAM,CAAC,IAAI;YACjB,KAAK,eAAe;gBAClB,OAAO,MAAM,CAAC,OAAO,IAAI,kBAAkB,CAAC;YAC9C;gBACE,OAAO,KAAK,CAAC;SAChB;KACF;;;;;;ACpBD;QAwBE,uBACUA,WACA,SACA,gBACA;YAHA,WAAM,GAANA,SAAM;YACN,YAAO,GAAP,OAAO;YACP,mBAAc,GAAd,cAAc;YACd,aAAQ,GAAR,QAAQ;+BAZI,KAAK;2CAkE+B,UAAA,KAAK;gBAC7D,OAAA,KAAK,CAAC,MAAM;aAAA;SAtDV;;;;;;;;;;;;;;QAQJ,+BAAO;;;;;;;YAAP;gBACE,IAAI,IAAI,CAAC,oBAAoB,EAAE;oBAC7B,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;iBACzC;gBAED,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBAC1B,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;iBACtC;gBAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;aAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAgBD,kCAAU;;;;;;;;;;;;;;;YAAV,UACE,uBAAuE,EACvE,SAA0C;gBAD1C,wCAAA;oBAAA,oCAAkD,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,GAAA;;gBAGvE,IAAI,IAAI,CAAC,WAAW,EAAE;oBACpB,MAAM,IAAI,KAAK,CACb,+FAA+F,CAChG,CAAC;iBACH;gBAED,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;gBAEvD,IAAI,CAAC,QAAQ,GAAG,SAAS,IAAI,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBAEjE,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC7B,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;;;;QAKO,oDAA4B;;;;;gBAClC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAC5BC,gBAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,YAAYC,oBAAa,GAAA,CAAC,EAC/CC,aAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAA,CAAC,EAClCC,8BAAoB,EAAE,CACvB,CAAC;;;;;;QAGI,4CAAoB;;;;sBAAC,UAA2B;gBAA3B,2BAAA;oBAAA,kBAA2B;;gBACtD,QACE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;qBACpD,UAAU,GAAG,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC,EACxC;;;;;QAGI,6CAAqB;;;;;;gBAC3B,IAAM,oBAAoB,GAAG,UAAC,QAAgB;oBAC5C,IAAI,KAAI,CAAC,eAAe,KAAK,QAAQ,EAAE;;wBAErC,OAAO;qBACR;oBAED,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;oBAChC,IAAI,KAAI,CAAC,eAAe,KAAK,SAAS,EAAE;wBACtC,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;;wBAKhC,IAAM,iBAAiB,GAAG,KAAI,CAAC,oBAAoB,EAAE,CAAC;wBACtD,IAAI,iBAAiB,KAAK,KAAI,CAAC,eAAe,EAAE;4BAC9C,OAAO;yBACR;qBACF;oBAED,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACpB,IAAI,EAAE,eAAe;wBACrB,OAAO,EAAE,QAAQ;qBAClB,CAAC,CAAC;iBACJ,CAAC;gBAEF,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;iBAC3E;;;;;QAGK,4CAAoB;;;;;;gBAC1B,IAAM,oBAAoB,GAAG,UAAC,QAAgB;oBAC5C,IAAI,KAAI,CAAC,eAAe,KAAK,SAAS,EAAE;;wBAEtC,OAAO;qBACR;;oBAED,IAAM,eAAe,GAAG,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;oBACxD,IAAI,KAAI,CAAC,eAAe,KAAK,eAAe,EAAE;;wBAE5C,OAAO;qBACR;oBAED,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;oBAChC,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;iBACrC,CAAC;gBAEF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO;qBAClC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,GAAA,CAAC;qBACpD,IAAI,CAACA,8BAAoB,EAAE,CAAC;qBAC5B,SAAS,CAAC,oBAAoB,CAAC,CAAC;;;oBAzItCC,eAAU;;;;;wBAPTC,aAAM;wBAPCC,aAAO;wBAEPC,mBAAc;wBADdC,eAAQ;;;4BADjB;;;;;;;ACAA;;;;;;QAOS,2BAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,mBAAmB;oBAC7B,SAAS,EAAE,CAAC,aAAa,CAAC;iBAC3B,CAAC;aACH;;oBAPFC,aAAQ;;kCALT;;;;;;;;;;;;;;;;;;;;;"}
